
I hope you are ready sweat because today,
we're not doing anything pretty,

we're not dealing with CSS, we're not
dealing with DOM elements, really.


We're dealing with the fundamentals
of JavaScript and that is working with
array methods.  I found that when
I forced myself to get really good at
filter, map, sort, reduce,
all of those array methods,
I found that my JavaScript programming
got a lot better. 

And this is really what
I want to drive home today, is just throw
a whole bunch of examples at you and
really get you better at working with
these array methods. A lot of people like


to call these filter, map, sort, reduce.
These are sort of like the gateway drug to
functional programming. So what we've got
here is some data, const inventors and
each inventor is an object. And then I've
got also a people array here which just

has strings. But inside of that string,
the last name, comma, space,
the first name. First of all, let's kick
it off here and if you think you can do

these own, please pause the video
and at least try them yourself.

But if you're fairly new to this stuff,
then stick with me. So first thing we want

to do is get people who were born in the
1500s. So I'm going to say, "const fifteen

equals" and we'll take the inventors and
we're going to filter over it.

00:01:25.800 --> 00:01:30.570 line:100% position:50% align:middle
Now, the way that a filter works is you
pass it a function and that function is
going to loop over every single item
in our array, so Albert, Isaac,

Galileo and it's going to give us the
inventor. So what that does is we take the
inventors, we loop over and for each
inventor, we can decide whether we want to

keep it or not. So, go here we'll have the
"if" statement. We say, if the inventor

dot, and the dot year, so that's when they
were born. If the inventor dot year is
greater or equal 1500 and the inventor
dot year is less than 1600, or we can do

less or equal to 1599, whatever you
prefer, whatever reads easier for you,

then we are going to return true. And
by returning true, that means we keep it.
And then you don't have to, a lot of times
I see else. People have an else here,
and return false. If you do not return
anything other than true, or something
that is truth-y, it will just throw it in
the garbage. So there's no need to return

false here. You just return true if you
want to keep it. So let's take a look at


our variable here, we'll console dot log
it fifteen. We've got two people. This is
a bit of a pain. So I'm going to show
you a little tip, console dot table,


ah-ha, very nice. So these are the people
that were born in the 1500s that we have

here. Now, this can be greatly reduced.
First of all, we can make this into an
arrow function, so delete the word
function then you can delete the

parenthesis around inventor if you prefer
and we'll make that an arrow function.

Good, that still works. 

And then this right here, this is either return true or


return false. So what we can actually do
is do it all in line where we will just

return these two things. So it's going to
give us the inventor and we're going to

return the results of these two things
which if both of them are true,

it's going to return a boolean of true.
And if that makes you a little bit

uncomfortable reading that, you can throw
an extra set of parentheses around it


and delete this. We've done it
all in one line, still works just as we
planned. 

Good, next one. Give us an array
of the inventors' first and last names.


What does map do? Map takes in an array,
it does something with that array and then
returns a new array but of the same
length. I like to think of map as sort of

like a factory machine where it takes in a
raw material and will stamp it somehow and

then kick out that item on the other end.
Whereas filter, you can bring in 10 things

and return 2. Map will always return the
same amount of items as you give it.

So here's what we're going to do. We'll
say "const full names equals inventors dot

map" and we have our inventor. And from
that, we are going to return the inventor


dot first, because that's their first
name. We can return inventor dot last and


console log with full names. It kind of
works but we still have a problem with the


space here. So you could either can
concatenate in a space, which will work.


Or you can return a backtick
and use template strings.

Working great for us. Pass. Good.
Next up, the sort. Sort the inventors by


birth date, oldest to youngest. So if
you've never used sort, the way that


sort works is that you get two items
and you have these two items

in your hand and you're asked
to sort just those two items.

So, you say, is person A
older than person B? And if so,

you put the older person on top. And the
way that we do that is by returning one

and negative one. And that's going to
bubble these items up and down in the


array. So we say, "const ordered
equals inventors dot sort"


and we have a function, which,
that function is going to give us like the

first person and the second person.
Or a lot of people just like to use
A and B, so whatever you prefer those.
So the first person is going to be A,

the second person is going to be B. And
then we will say "if A dot" and we need to


do it based on their birth date here, so
"A dot year is greater than B dot year"

then we return one, else, you return
negative one. And that's just going to

move these people up and down in the...
You can sort of imagine bubbling up and


down inside of the array that we have.
Now, let's take look at way here.


Oh, we've got an error here on line 39.
What did we do? We should be able to

spell function right. There we go. And now
we have the oldest people here as well as

the youngest people. Now, this is really,
really long. We could really cut that down

by doing something like this,
"ordered equals inventors dot sort"

and you have A and you have B.
And from that, We are going to do

what's called a ternary.
A ternary. I can't say that properly.

Ternary operator, whatever. Somebody once
sent me a message after a talk and said,


you said "ternary" wrong and now I'm self
conscious every single time that I say it.


So from that, we want to have a ternary
which is like a shorthand "if" statement,


with "A dot year is greater than
B dot year" and if that is true,

return one, otherwise, return negative
one. And that is the exact same thing as

what we were doing here, just doing it one
line with an arrow function and implicit

return in a ternary operator.
Let's double check that.


Still works? Works great.


Next one. How many years did all of the
inventors live? So what a reduce will do


is, where like a sort in a map, they will
just take items in and either sort them or

they will turn them into something else,
or they will filter them down.

What a reduce will do is allow you to sort
of build something on every single one.


So if you've ever done code like this
where you do "var total years equals zero"


and then you bust out the old "for"
loop...Which one is that? Right here.

Then you have inventors. And then you do
"total years plus equals inventors dot...

You've done this before, right?
Where you have a variable before and then

you do this crazy loop and then finally
when you're done, you can console log

total years, right? A reduce is just
a much cleaner way to do that and you


don't have to do this crazy square bracket
i which I have seen a lot of people having

trouble learning. So this is what we're
going to do, is we're going to say

"const total years equals inventors dot
reduce." And the way that reduce works is

it's going to give you sort of like
your running total,

or what you've returned
from this function last time.

So we're going to call that total.
And then it also is going to give you


the inventor. And from that...
I need to wrap those in some parentheses.


You have an arrow function here. And from
that, we are going to return the total


which is what the total was last time
around. Again, all these functions,


reduce, sort, filter, they just loop over
every single one. And then we are going to
return the number of years that that
inventor had lived. So we're going to say

"inventor dot past minus
inventor dot year."


Now let's try that. It's not going to work
totally for us, "console log, total years"


and we got this "object, object 7"
like what? What's going here?


And the problem is that, the first time
around, we don't have a total and it's

equal to undefined. So what we need to do
is just make this zero and that will then


allow us to add it up, 523 years. How you
doing? Maybe need to go get a drink?

Get a sports drink, something like that?
We have another one coming up here,


sort inventors by years lived. Okay, so
"const oldest equals inventors dot." Now


we're going to sort them and we are going
to get A and B. And before I do the


returning one or negative one, we're going
to create some variable so we can use that


in our "if" statements. So it's like,
"const last guy, how old that he lived A

dot past minus A dot year" and then we'll
say, "next guy is equal to B dot year."

Then from that, we are going to say "if
last guy is greater than next guy" we are


going to return negative one.
And then else, we are going to

return one. Now, that seems a little bit
long. We can really clean that up and we


can simply just say return, we can use our
ternary operator. Return next guy if that

is true, negative one. Otherwise,
if that is false, return one.

And that's the exact same thing as doing
this "if" statement. We just do it in one

fell swoop. Let's console log the oldest,
console dot table it, beautiful.

This guy lived a whole bunch of years.
This guy didn't live as many.

Looking good. Next, create a list of
boulevards in Paris that contain "de"

anywhere in the name, all right. I've got
this link here and this one we're going to


have to do from the console, I 'm just
going to open it up. Now we've got all of


these boulevards here and I need to first
get the DOM elements out of the page.


So how would we do that? Well, we could
say, "document dot query selector" but we


don't know what to select. So what we
have to do is get out our div tools,


inspect whatever contains this.
Let's see, what contains all of these?
There we go, "mw-category," "const
category = document.querySelector dot


mw-category. So let's see what we got
here. There we go, category is equal to
that div and then we want to find the
links within it, so I'm going to make

another one, "const links equals," we can
say, "category dot query selector all."

Again, you can call query selector on any
existing DOM element.


It doesn't always have to be document. It
could look inside of an existing element


and that's really why I'm doing this in
two steps. I could have just said

"mw-category A" and found all the links,
but I really wanted to show you that you


can call query selector against any
existing DOM element to look inside of


that DOM element. So it's going to
look for links inside of that.


Oh, let's see what we've got. Links,
ah-ha, so this is a list of links.


It's every link on the actual page.
Now, what I want to do is first,


we're going to convert that list of links
to a list of names and then we're going to


filter that list of names for only ones
that include the actual names.


So let's say "const de equals links dot
map." Remember, if we take in the list of


links and kick out a list of names.
So we're going to map over each one.


It's going to be a link. And from that
link, we are going to return just the

"link dot text content" and that will give
us whatever the text is inside of that

rather than the entire link because we
don't really care about the rest of the

link. So let's see we got here.
Uh oh, links that mapped...oh, perfect.


I'm glad we ran into this. What did
I tell you in our earlier video?


Query selector will return to you, a node
list. And if we open up the prototype,

you don't see map, you see for each but
not a map. So what we need to do is change


this into an array. Because right now,
it's just a node list. There are two ways


we could do that. First, you can just wrap
the entire thing in "array dot from" and


that will convert it into an array. Or you
might also see people doing something like


this, where you create an array and then
you use the ES6 spread to spread every


single item into the array. And again, if
you've watched the ES6 videos I've done on


spreads, you'll know that a spread will
take every item out of something

initerable, which in this case is going to
be a node list, and put it into the

containing array. So I think array dot
from is probably a little bit more

readable in this case, so let's go with
that. And then we need to, this should


work. Now, I can't rerun this code here
because I've used const. That's one of the

pains of using const. It's going to tell
you it's already been declared.

So I just need to refresh and rerun this
code here. So de, there we go,


de is a huge array of every single one.
Then I'm just going to immediately filter

that. So what I like to do with mine is
let's just put them on their own line.

The first one, we'll map it and then
the second one, we'll filter it.


So let's say "street name" and we're going
to only return if the street name


includes de. So let's see what we got
here. I've got to refresh again and rerun
this. Now "de is equal to" there we go.
Now we got a subset of that initial array

00:15:47.480 --> 00:15:53.690 line:100% position:50% align:middle
only containing de inside of it. Sorry for
my French users, we have Canadian French

which is not the same as European French.
Next one, we've got a sort exercise which

is sorting the people alphabetically by
last name. So we're not dealing with the

inventors anymore. We're done with those
guys. Now we actually want to work with


people. Okay, well there's no nice
object here, so how would I do that?


Well, let's go up here to the sort
exercise and I'm going to say "const alpha


equals." You take the people and we are
going sort over it, so dot sort. And let's


just use a regular function here and we go
over the ES6 and we're going to get the

last one and the next one.
Now, I don't care about returning anything
just yet. What I want to do is just
console log the last one just to see what


we're working with. We get an error
because I wrote this code in here which


this was meant to run on the Wikipedia
page and here, you're trying to call query

selector against category and if this
category comes back with nothing,


you can't call query selector against it.
So you have to a check if you weren't sure

that was coming in. Let's just comment
that out for now and deal with what


we've  got here. There we go.
So look, Beck, Glenn, Blake,


William. So that is the last one, but what
I really want is to convert that into a

00:17:23.530 --> 00:17:28.540 line:100% position:50% align:middle
first name and a last name. So what we can
do is, we can say "const parts equals


last one dot split." And what are
we going to split it on? Well, one thing


that all of these people have in common
is that there's a comma and a space.


So we're going to split it on a comma and
a space and let's look at the parts that


we have here. Okay, so now
we get an array where the first


thing is the last name and
the second thing is the first name.

It's a little bit backwards. So what we
could do is we could de-structure that.


Meaning that rather than returning array,
we can put those into their own variables


right away. So we say "square bracket last
comma first" and now if we just console


log the last and the first as their own
separate variables. There we go,

Blake William, Nick Beddoes, whatever we
have there, cool. Now we have some proper

variables to work with and then we have to
do that with the next one as well.

And we probably want to rename these
suckers to be something that obviously we
can't use last and first. So let's say "A
last A first" and this one is going to be
"B last and B first." That's going to be
the last person and the next person.


See what we have here, good.
Then we do our simple last name here,

that's really all we're concerned about in
this case, so turn A last is greater than

B last if that's true return negative one,
otherwise return one and let's console log


alpha. There we go, sorted Blake William
is the first one, last one is Beck Glenn.


We're backwards there, we need to return
one and a negative one instead.


There we go, Beck is the first one, Blake
is the last one. So you see that we're


actually not using this data that we've
just made here. That's simply for the


conversion but we're still hanging on to
the original string that we were working


with. If you did want to return an array
or an object or something like that,

that's where reduce would come in. My
editor is yelling at me here and is

telling me I shouldn't be using a proper
function, I should be using an arrow
function in this case.
It still works just good.


One more, here we go. This one is going to
reduce, sum up the instances of these.


So we've got car, car, truck, truck, bike,
walk, car. And I want to tally at the end

of day in order with what to work with.
Reduce is like one of the most flexible
methods that we have in an array and this
is just another way that we can use it.


So let's say, "const transportation equals
data dot reduce" and we are going to then


give ourselves a function which is going
to be the object or "obj" and then the,

let's call it item, which is
going to be car, car, truck, truck,

bike and every single one. Now we need to
start with an object which has to have


something like a car zero, walk zero,
truck zero. And if you're looking at me

like, "Wes, I don't know what are all
the possible ones are."
You can't just like hard code those
in there and that's right.


We're just going to start with a blank
object here and we'll do this by


ourselves. So let's go back and we're just
going to start with the blank object

that's the starting and we're going to
loop over every single one.

So, what we will do is just console log
item and then return the object.


And I just want to show you here that
we're going to get every single item as we


loop over it, good. Car, car,
truck, bike, walk, etc., etc.


Now, what we want to do is we need to say
if, let's do this, we'll say "object of

item plus, plus" and usually what that
would do if we had a walk zero here,


it would just increment it to one. But
because we don't know if that key exists

just yet, what we need to do is check for
it on the end here. So we have to say "if
there is no object item, then object item
is equal to zero." That will just set the

initial one to zero and then we can move
along and increment it and return that

object. So if that has worked here,
console dot log transportation.

Here we go, object, bike, car, truck, van.
So you see what they're...


I find that reduce is probably the hardest
one for people to get. But we start with a


blank object and then every time we loop
over one, we first see is there even a


zero there to work with at all? If not, we
need to make an entry for that and then we


go ahead and increment it. And that's
really nice because then I can come along


here and add like a pogo stick and when I
refresh the key of pogo stick is going to


be added, no problem to that. Actually,
I probably shouldn't put spaces in there.


But no problem, add it in.
So I know that was a lot.


It's just a lot of exercise.
We've got another one


coming up in a couple of days
that we're going to go over as well.


But if you feel at all, a little bit shaky
at these, just keep doing them over and


over until you totally understand what's
going on, as well as you feel comfortable


just going into a website and doing one
of these boulevard or Paris or taking some


data and being able to filter and sort
over it. See you in the next one.

